import React, { useState } from 'react';
import styles from "../styles/Consensus.module.scss";
import { FaUserAlt, FaServer, FaNetworkWired, FaCubes, FaCheckCircle, FaShieldAlt } from 'react-icons/fa';
import { motion, AnimatePresence } from 'framer-motion';

interface ConsensusProps {}

const Consensus: React.FC<ConsensusProps> = () => {
  // Prinzipien des Bitcoin-Konsensus
  const consensusPrinciples = [
    {
      title: "Dezentralisierung",
      icon: <FaNetworkWired />,
      description: "Kein zentraler Verwalter ‚Äì stattdessen teilen Tausende Computer (Nodes) die Verantwortung f√ºr das Netzwerk."
    },
    {
      title: "Proof-of-Work",
      icon: <FaServer />,
      description: "Miner l√∂sen komplexe mathematische R√§tsel, um neue Bl√∂cke zu erzeugen und werden daf√ºr belohnt."
    },
    {
      title: "L√§ngste Kette",
      icon: <FaCubes />,
      description: "Die Blockchain mit der meisten Rechenarbeit wird automatisch als die g√ºltige akzeptiert."
    },
    {
      title: "Unver√§nderlichkeit",
      icon: <FaCheckCircle />,
      description: "Einmal best√§tigte Transaktionen k√∂nnen praktisch nicht mehr ver√§ndert werden."
    },
    {
      title: "Offener Zugang",
      icon: <FaUserAlt />,
      description: "Jeder kann am Netzwerk teilnehmen ‚Äì ohne Erlaubnis oder Registrierung."
    },
    {
      title: "Kryptographische Sicherheit",
      icon: <FaShieldAlt />,
      description: "Starke Verschl√ºsselungstechniken sch√ºtzen Transaktionen und das gesamte Netzwerk vor Angriffen."
    }
  ];

  // Interface f√ºr Bl√∂cke
  interface Block {
    height: number;
    size?: number;
    maxCoins?: number;
  }

  // Interface f√ºr Nodes
  interface Node {
    supportsChange: boolean;
  }

  // State f√ºr die Simulation
  const [nodes, setNodes] = useState<Node[]>(Array(12).fill(0).map(() => ({ 
    supportsChange: false 
  })));
  const [blockSize, setBlockSize] = useState(1);
  const [maxCoins, setMaxCoins] = useState(21);
  const [showFork, setShowFork] = useState(false);
  const [forkPoint, setForkPoint] = useState(5);
  const [_originalChainContinuation, setOriginalChainContinuation] = useState<Block[]>([] as Block[]);
  const [_forkChainContinuation, setForkChainContinuation] = useState<Block[]>([] as Block[]);

  // State f√ºr das Popup
  const [popupMessage, setPopupMessage] = useState<string>('');
  const [showPopup, setShowPopup] = useState<boolean>(false);

  // Berechne die Anzahl der Nodes, die die √Ñnderung unterst√ºtzen
  const supportingNodes = nodes.filter(node => node.supportsChange);

  // Toggle Support f√ºr einen Node
  const toggleNodeSupport = (index: number): void => {
    const newNodes = [...nodes];
    
    // Aktueller Status des angeklickten Nodes umkehren
    newNodes[index].supportsChange = !newNodes[index].supportsChange;
    
    // Pr√ºfen, ob alle Nodes zustimmen w√ºrden
    const allNodesSupport = newNodes.every(node => node.supportsChange);
    
    // Falls alle zustimmen w√ºrden, einen zuf√§lligen Node (au√üer den gerade angeklickten) wieder deaktivieren
    if (allNodesSupport) {
      // Verf√ºgbare Indizes (alle au√üer dem gerade angeklickten)
      const availableIndices = Array.from({ length: nodes.length }, (_, i) => i)
        .filter(i => i !== index);
        
      // Zuf√§lligen Index ausw√§hlen
      const randomIndex = availableIndices[Math.floor(Math.random() * availableIndices.length)];
      
      // Diesen Node wieder deaktivieren
      newNodes[randomIndex].supportsChange = false;
      
      // Popup-Nachricht setzen und anzeigen
      setPopupMessage(`Node ${randomIndex + 1} weigert sich, die √Ñnderungen zu akzeptieren!`);
      setShowPopup(true);
      
      // Popup nach 3 Sekunden automatisch schlie√üen
      setTimeout(() => setShowPopup(false), 3000);
    }
    
    setNodes(newNodes);
  };

  // Pr√ºfen, ob der "√Ñnderungen anwenden"-Button aktiviert sein soll
  const canApplyChanges = (): boolean => {
    // Pr√ºfen, ob mindestens ein Node die √Ñnderung unterst√ºtzt
    const hasNodeSupport = nodes.some(node => node.supportsChange);
    
    // Pr√ºfen, ob mindestens eine Regel ge√§ndert wurde
    const hasRuleChanges = blockSize > 1 || maxCoins > 21;
    
    // Beide Bedingungen m√ºssen erf√ºllt sein
    return hasNodeSupport && hasRuleChanges;
  };

  // Simuliere den Fork
  const simulateFork = () => {
    // F√ºge neue Bl√∂cke f√ºr beide Ketten hinzu
    setForkPoint(5);
    
    // Erstelle Fortsetzungsbl√∂cke f√ºr beide Ketten
    setOriginalChainContinuation(Array(3).fill(0).map((_, i) => ({ 
      height: forkPoint + i + 1 
    })));
    
    setForkChainContinuation(Array(3).fill(0).map((_, i) => ({ 
      height: forkPoint + i + 1,
      size: blockSize,
      maxCoins: maxCoins
    })));
    
    setShowFork(true);
  };

  // Generiere einen Namen f√ºr die Fork-Chain basierend auf den √Ñnderungen
  const generateForkName = () => {
    return "SHITCOIN"; // Immer SHITCOIN nennen, egal was ge√§ndert wurde
  };

  return (
    <div className={styles.pageContainer}>
      <section className={styles.consensusSection}>
        {/* Intro-Bereich mit Animation */}
        <motion.div 
          className={styles.introSection}
          initial={{ opacity: 0, y: -20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.8, ease: "easeOut" }}
        >
          <h1 className={styles.title}>Spielregeln des Netzwerks</h1>
          <p className={styles.description}>
            Bitcoin basiert auf einem Regelwerk, dem alle Teilnehmer folgen. 
            Diese Regeln werden von niemandem kontrolliert, sondern durch gemeinsamen 
            Konsens aller Netzwerkteilnehmer aufrechterhalten.
          </p>
        </motion.div>
        
        {/* Prinzipien-Grid mit Animation */}
        <motion.div 
          className={styles.principlesGrid}
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          transition={{ duration: 0.8, delay: 0.3 }}
        >
          {consensusPrinciples.map((principle, index) => (
            <motion.div 
              key={index} 
              className={styles.principleCard}
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.5, delay: 0.1 * index }}
            >
              <div className={styles.principleIcon}>{principle.icon}</div>
              <h3>{principle.title}</h3>
              <div className={styles.principleDescription}>
                <p>{principle.description}</p>
              </div>
            </motion.div>
          ))}
        </motion.div>
        
        {/* Interaktiver Bereich f√ºr die Konsensus-Simulation mit Animation */}
        <motion.div 
          className={styles.consensusSimulation}
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          transition={{ duration: 1, delay: 0.6 }}
        >
          {/* Titel und Intro/Aha-Moment mit Animation */}
          <AnimatePresence mode="wait">
            {!showFork ? (
              <>
                {/* √úberhebliche Einleitung - wird nur angezeigt, wenn kein Fork simuliert wurde */}
                <motion.div
                  key="intro"
                  initial={{ opacity: 1 }}
                  exit={{ opacity: 0 }}
                  transition={{ duration: 0.3 }}
                >
                  <h2>Satoshi hat's verbockt ‚Äì WIR machen Bitcoin besser!</h2>
                  <p className={styles.simulationIntro}>
                    Wer braucht schon dieses veraltete Design? <span className={styles.highlight}>L√§cherliche 1 MB Blockgr√∂√üe</span> und <span className={styles.highlight}>nur 21 Millionen Coins</span> ‚Äì offensichtlich hat Satoshi die Zukunft nicht verstanden! 
                    Endlich kannst DU zeigen, wie man Bitcoin richtig designt. Klicke ein paar Nodes an, schiebe die Regler und beweise, 
                    dass deine Vision √ºberlegen ist. Das Bitcoin-Netzwerk wird dir sicher dankbar sein...
                  </p>
                </motion.div>
              </>
            ) : (
              <>
                {/* Kombinierter Aha-Moment und Fork-Erkl√§rung */}
                <motion.div 
                  key="aha-moment"
                  className={styles.forkExplanation}
                  initial={{ opacity: 0, y: 20 }}
                  animate={{ opacity: 1, y: 0 }}
                  transition={{ duration: 0.5 }}
                >
                  <div className={styles.forkHeader}>
                    <div className={styles.forkIcon}>üéâ</div>
                    <h3>Herzlichen Gl√ºckwunsch zum Shitcoin!</h3>
                  </div>
                  
                  <div className={styles.forkContent}>
                    <div className={styles.resultCard}>
                      <div className={styles.resultStats}>
                        <div className={styles.statItem}>
                          <span className={styles.statValue}>{supportingNodes.length}</span>
                          <span className={styles.statLabel}>Nodes folgen dir</span>
                        </div>
                        <div className={styles.statDivider}></div>
                        <div className={styles.statItem}>
                          <span className={styles.statValue}>{nodes.length - supportingNodes.length}</span>
                          <span className={styles.statLabel}>Nodes bleiben bei Bitcoin</span>
                        </div>
                      </div>
                      
                      <div className={styles.resultMessage}>
                        <span className={styles.highlight}>Wundervoll:</span> Deine "genialen" Regeln haben zu einer Blockchain-Spaltung gef√ºhrt.
                        Gratulation zu deinem brandneuen Shitcoin, den absolut keine Sau braucht!
                      </div>
                    </div>
                    
                    <div className={styles.forkInsight}>
                        <span className={styles.insightIcon}>üí°</span>
                      <p>
                      Solange auch nur ein einziger Node am urspr√ºnglichen Konsens festh√§lt, wird Bitcoin genau so weiterleben wie bisher.
                      unbeeindruckt von jedem Versuch, etwas zu √§ndern.
                      </p>
                    </div>
                    
                    <motion.div 
                      className={styles.forkActionResult}
                      initial={{ opacity: 0, scale: 0.95 }}
                      animate={{ opacity: 1, scale: 1 }}
                      transition={{ delay: 0.3, duration: 0.5 }}
                    >
                      <div className={styles.actionResultHeader}>
                        <span className={styles.resultIcon}>‚ùå</span>
                        <span>Die Bitcoin-Realit√§t</span>
                      </div>
                      <p>
                        Hast du ernsthaft geglaubt, du k√∂nntest Bitcoin einfach "verbessern"? Konsensus bedeutet nicht 
                        Mehrheit, sondern vollst√§ndige √úbereinstimmung. Jede Abweichung f√ºhrt unweigerlich zu einer 
                        Spaltung ‚Äì und jetzt bist du stolzer Besitzer eines wertlosen Shitcoins!
                      </p>
                    </motion.div>
                  </div>
                </motion.div>
              </>
            )}
          </AnimatePresence>
          
          {/* Netzwerk-Visualisierung - nur anzeigen, wenn noch kein Fork simuliert wurde */}
          <AnimatePresence mode="wait">
            {!showFork ? (
              <motion.div 
                className={styles.networkVisualization}
                initial={{ opacity: 1 }}
                exit={{ opacity: 0, height: 0 }}
                transition={{ duration: 0.5 }}
              >
                <div className={styles.networkNodes}>
                  {nodes.map((node, index) => (
                    <motion.div 
                      key={index} 
                      className={`${styles.node} ${node.supportsChange ? styles.supportChange : ''}`}
                      onClick={() => toggleNodeSupport(index)}
                      whileHover={{ scale: 1.05 }}
                      whileTap={{ scale: 0.95 }}
                      initial={{ opacity: 0, scale: 0.8 }}
                      animate={{ opacity: 1, scale: 1 }}
                      transition={{ duration: 0.3, delay: index * 0.05 }}
                    >
                      <div className={styles.nodeIcon}>
                        <FaServer />
                      </div>
                      <div className={styles.nodeLabel}>Node {index+1}</div>
                      <div className={styles.nodeStatus}>
                        {node.supportsChange ? 'Unterst√ºtzt √Ñnderung' : 'Folgt Original-Regeln'}
                      </div>
                    </motion.div>
                  ))}
                </div>
                
                {/* Regel√§nderungs-Kontrollen */}
                <div className={styles.ruleControls}>
                  <h3>Konsensus-Regeln √§ndern</h3>
                  
                  <div className={styles.ruleOption}>
                    <label data-value={`${blockSize} MB`}>Blockgr√∂√üe</label>
                    <input 
                      type="range" 
                      min="1" 
                      max="32" 
                      value={blockSize} 
                      onChange={(e) => setBlockSize(Number(e.target.value))} 
                    />
                  </div>
                  
                  <div className={styles.ruleOption}>
                    <label data-value={`${maxCoins}M`}>Maximale Bitcoin-Anzahl</label>
                    <input 
                      type="range" 
                      min="21" 
                      max="42" 
                      value={maxCoins} 
                      onChange={(e) => setMaxCoins(Number(e.target.value))} 
                    />
                  </div>
                  
                  {!canApplyChanges() && (
                    <div className={styles.applyChangesHint}>
                      {!nodes.some(node => node.supportsChange) ? 
                        "W√§hle mindestens einen Node aus, der die √Ñnderung unterst√ºtzt." : 
                        "Ver√§ndere mindestens einen Parameter (Blockgr√∂√üe oder M√ºnzen-Limit)."}
                    </div>
                  )}

                  <motion.button 
                    className={`${styles.applyChanges} ${!canApplyChanges() ? styles.applyChangesDisabled : ''}`}
                    onClick={simulateFork}
                    whileHover={canApplyChanges() ? { scale: 1.05 } : {}}
                    whileTap={canApplyChanges() ? { scale: 0.95 } : {}}
                    disabled={!canApplyChanges()}
                  >
                    √Ñnderungen anwenden
                  </motion.button>
                </div>
              </motion.div>
            ) : null}
          </AnimatePresence>
          
          {/* Visualisierung der Blockchain vor/nach Fork mit Animation */}
          {showFork && (
            <motion.div 
              className={styles.blockchainVisualization}
              initial={{ opacity: 0, y: 30 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.6 }}
            >
              <div className={styles.originalChain}>
                <h3>Original Bitcoin</h3>
                <div className={styles.chainBlocks}>
                  {/* Zeigt 5 Bl√∂cke mit kleinen Nummern zuerst (oben) */}
                  {[...Array(5)].map((_, i) => {
                    const blockNumber = forkPoint - 4 + i; // Start mit niedrigster Blocknummer (z.B. 1, 2, 3, 4, 5)
                    return (
                      <motion.div 
                        key={`original-${i}`} 
                        className={styles.block}
                        initial={{ opacity: 0, x: -20 }}
                        animate={{ opacity: 1, x: 0 }}
                        transition={{ duration: 0.3, delay: i * 0.1 }}
                      >
                        <div className={styles.blockHeader}>Block {blockNumber}</div>
                        <div className={styles.blockContent}>
                          <p>Gr√∂√üe: 1 MB</p>
                          <p>Max Coins: 21M</p>
                        </div>
                      </motion.div>
                    );
                  })}
                </div>
              </div>
              
              <div className={styles.forkChain}>
                <h3>{generateForkName()}</h3>
                <div className={styles.chainBlocks}>
                  {/* Zeigt 5 Bl√∂cke der Fork-Chain */}
                  {[...Array(5)].map((_, i) => {
                    const blockNumber = forkPoint - 4 + i; // Start mit niedrigster Blocknummer
                    // Die letzten 3 Bl√∂cke haben die neuen Regeln (die h√∂heren Blocknummern)
                    const isNewRules = i >= 2; // Die unteren 3 Bl√∂cke haben neue Regeln
                    return (
                      <motion.div 
                        key={`fork-${i}`} 
                        className={`${styles.block} ${isNewRules ? styles.newRulesBlock : ''}`}
                        initial={{ opacity: 0, x: 20 }}
                        animate={{ opacity: 1, x: 0 }}
                        transition={{ duration: 0.3, delay: i * 0.1 }}
                      >
                        <div className={styles.blockHeader}>Block {blockNumber}</div>
                        <div className={styles.blockContent}>
                          <p>Gr√∂√üe: {isNewRules ? blockSize : 1} MB</p>
                          <p>Max Coins: {isNewRules ? maxCoins : 21}M</p>
                        </div>
                      </motion.div>
                    );
                  })}
                </div>
              </div>
            </motion.div>
          )}
        </motion.div>
        
        {/* Custom Popup innerhalb des Containers */}
        <AnimatePresence>
          {showPopup && (
            <motion.div 
              className={styles.customPopup}
              initial={{ opacity: 0, y: -50, scale: 0.9 }}
              animate={{ opacity: 1, y: 0, scale: 1 }}
              exit={{ opacity: 0, scale: 0.9 }}
              transition={{ type: "spring", stiffness: 300, damping: 25 }}
            >
              <div className={styles.popupContent}>
                <div className={styles.popupIcon}>‚ö†Ô∏è</div>
                <p>{popupMessage}</p>
                <motion.button 
                  className={styles.popupCloseButton}
                  onClick={() => setShowPopup(false)}
                  whileHover={{ scale: 1.1 }}
                  whileTap={{ scale: 0.95 }}
                >
                  Verstanden
                </motion.button>
              </div>
            </motion.div>
          )}
        </AnimatePresence>
        
        {/* Prozessablauf mit visueller Timeline und Animation */}
        <motion.div 
          className={styles.consensusExplanation}
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          transition={{ duration: 0.8, delay: 0.9 }}
        >
          <h2 className={styles.processTitle}>Der Konsensus-Prozess im Detail</h2>
          
          <div className={styles.timelineContainer}>
            {[
              { 
                title: "Transaktion wird initiiert", 
                desc: "Ein Nutzer sendet eine Bitcoin-Transaktion",
              },
              { 
                title: "Validierung durch Nodes", 
                desc: "Vollst√§ndige Nodes pr√ºfen, ob die Transaktion den Konsensus-Regeln entspricht",
              },
              { 
                title: "Aufnahme in den Mempool", 
                desc: "G√ºltige Transaktionen werden in die Warteschlange aufgenommen",
              },
              { 
                title: "Mining-Prozess", 
                desc: "Miner nehmen Transaktionen aus dem Mempool und versuchen, einen g√ºltigen Block zu finden",
              },
              { 
                title: "Neuer Block gefunden", 
                desc: "Ein Miner l√∂st das Proof-of-Work-R√§tsel und verbreitet seinen Block",
              },
              { 
                title: "Konsensus-Best√§tigung", 
                desc: "Andere Nodes pr√ºfen den neuen Block und akzeptieren ihn bei Regelkonformit√§t",
              },
              { 
                title: "Finalisierung", 
                desc: "Mit jeder weiteren Best√§tigung wird die Transaktion unumkehrbarer",
              }
            ].map((step, index) => (
              <motion.div 
                key={index}
                className={styles.timelineStep}
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ duration: 0.5, delay: 0.9 + (index * 0.15) }}
              >
                
                <div className={styles.timelineContent}>
                  <h3 className={styles.timelineTitle}>{step.title}</h3>
                  <p className={styles.timelineDesc}>{step.desc}</p>
                </div>
              </motion.div>
            ))}
          </div>
        </motion.div>
      </section>
    </div>
  );
};

export default Consensus;